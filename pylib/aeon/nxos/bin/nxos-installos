#!/usr/bin/env python

# nxos-installos

import sys
import os
import json
import argparse
import yaml
import logging

from aeon.nxos import NxosDevice
from aeon.nxos.exceptions import NxosException
from aeon.exceptions import ProbeError, UnauthorizedError

# ##### -----------------------------------------------------------------------
# #####
# #####                           Command Line Arguments
# #####
# ##### -----------------------------------------------------------------------

psr = argparse.ArgumentParser(
    prog='nxos-installos',
    description="NXOS install OS",
    add_help=True)

psr.add_argument(
    '-t', '--target',
    required=True,
    help='hostname or ip_addr of target device')

psr.add_argument(
    '--server',
    required=True,
    help='ip-addr of the server hosting the image files')

psr.add_argument(
    '--image-profile',
    required=True,
    help='name of the image profile file')

psr.add_argument(
    '--logfile',
    help='name of log file')

# ##### -------------------------
# ##### authentication
# ##### -------------------------

group = psr.add_argument_group('authentication')

group.add_argument(
    '-U', dest='user_var',
    required=True,
    help='Username environment variable')

group.add_argument(
    '-P', dest='passwd_var',
    required=True,
    help='Passwd environment variable')

g_cli_args = psr.parse_args()
g_log = logging.getLogger(name='nxos-installos')


def setup_logging():
    g_log.setLevel(logging.INFO)
    fh = logging.FileHandler(g_cli_args.logfile)
    fmt = logging.Formatter(
        '%(asctime)s:%(levelname)s: {target}:%(message)s'
        .format(target=g_cli_args.target))
    fh.setFormatter(fmt)
    g_log.addHandler(fh)

if g_cli_args.logfile:
    setup_logging()


# ##### -----------------------------------------------------------------------
# #####
# #####                           Utility Functions
# #####
# ##### -----------------------------------------------------------------------

def exit_results(results, exit_error=None):
    json.dump(results, fp=sys.stdout)
    sys.exit(0 if results['ok'] is True else exit_error or 1)


# ##### -----------------------------------------------------------------------
# #####
# #####                           Main Code Functions
# #####
# ##### -----------------------------------------------------------------------

def copy_image_to_device(dev, profile):

    copy_from = profile['copy_from']

    if '{server}' in copy_from:
        if not g_cli_args.server:
            exit_results(dict(
                ok=False,
                error_type='args',
                message='Missing --server parameter'))
        copy_from = copy_from.format(server=g_cli_args.server)

    copy_from = os.path.join(copy_from, dev.install_os.image)

    # --------------------------------------------------------
    # perform the copy, the device initiates this copy command
    # --------------------------------------------------------

    g_log.info('starting copy [%s] ... please be patient' % copy_from)
    try:
        dev.install_os.copy_from(location=copy_from)

    except NxosException:
        msg = 'failed to copy image: %s' % copy_from
        g_log.error(msg)
        exit_results(dict(
            ok=False,
            error_type='install',
            message=msg))

    # --------------------------------------------
    # now validate the MD5 checksum after the copy
    # --------------------------------------------

    has_md5sum = dev.install_os.md5sum
    if has_md5sum != profile['md5sum']:
        msg = 'md5sum mismatch after file copy, need user attention'
        g_log.error(msg)
        exit_results(dict(
            ok=False,
            error_type='install',
            message=msg))
    else:
        g_log.info("md5sum check pass, copy completed OK.")


def start(dev):
    profile = yaml.load(open(g_cli_args.image_profile))

    # @@@ TO-DO: need to schema-check the profile data; the current
    # @@@        code presumes that the files are perfectly formed.

    req_os_version = profile['os_version']
    dev_os_version = dev.facts['os_version']

    g_log.info("required OS version is: %s" % req_os_version)
    g_log.info("device is current running: %s" % dev_os_version)

    if req_os_version == dev_os_version:
        msg = 'image is already installed, so all done.'
        g_log.info(msg)
        exit_results(dict(
            ok=True,
            rebooting=False,
            message=msg
        ))

    # -----------------------------------------------------------------
    # does the image exist on the device and/or need to be copied down?
    # -----------------------------------------------------------------

    dev.install_os(image=profile['image'])
    has_md5sum = dev.install_os.md5sum

    if not has_md5sum:
        # need to copy the image over to the device
        g_log.info('image does not exist on device, need to copy over')
        copy_image_to_device(dev, profile)

    elif has_md5sum != profile['md5sum']:
        # need to make sure the image/md5sum matches
        # @@@ TO-DO: implement this code branch

        msg = 'existing file md5sum mismatch, need to re-copy image'
        g_log.warn(msg)
        exit_results(dict(
            ok=False,
            error_type='not-implemented',
            message=msg))
    else:
        g_log.info('image file exists and md5sum matches OK.')

    # -----------------------------------------------------------------
    # at this point, the image exists, and md5sum matches
    # now need to run the install process.  this will cause the device
    # to reboot when the installation is completed
    # -----------------------------------------------------------------

    g_log.info('running installation process ... please be patient')
    try:
        dev.install_os.run()
    except NxosException:
        msg = 'failed to install properly'
        g_log.error(msg)
        exit_results(dict(
            ok=False,
            error_type='install',
            message=msg))

    g_log.info('installation process completed, device rebooting')
    exit_results(dict(
        ok=True,
        rebooting=True,
        message='installation completed'))


def main():
    target = g_cli_args.target
    user = os.getenv(g_cli_args.user_var)
    passwd = os.getenv(g_cli_args.passwd_var)

    try:
        dev = NxosDevice(target, user=user, passwd=passwd)

    except UnauthorizedError:
        exit_results(dict(
            ok=False,
            error_type='login',
            message='Uauthorized - check user/password'))

    except ProbeError:
        exit_results(dict(
            ok=False,
            error_type='login',
            message='Failed to probe target %s' % target))

    else:
        start(dev)

if '__main__' == __name__:
    main()
