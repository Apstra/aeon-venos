#!/usr/bin/env python

# aeon-nxos

import sys
import json

import aeon.nxos as nxos
from aeon.utils.stdargs import ArgumentParser, Stdargs
from aeon.exceptions import ProbeError, UnauthorizedError

_PROGNAME = 'aeon-nxos'


# ##### -----------------------------------------------------------------------
# #####
# #####                           Command Line Arguments
# #####
# ##### -----------------------------------------------------------------------

def setup_cli():

    cli = Stdargs(prog=_PROGNAME,
                  description="Aeon NXOS command utility",
                  add_help=True)

    psr = cli.psr
    psr_subcmd = psr.add_subparsers(dest='subcmd')

    def facts():
        subcmd = psr_subcmd.add_parser(
            'facts',
            help='Return the target facts')

        subcmd.add_argument(
            '--brief', help='Only the bare minimum facts', action='store_true')

    facts()

    def guestshell():
        gs = psr_subcmd.add_parser(
            'guestshell',
            help='Guestshell commands')

        gs_subs = gs.add_subparsers(dest='guestshell')

        sudoers = gs_subs.add_parser('sudoers', help='sudo control')
        sudoers.add_argument(
            '--enable', help='enable sudo',
            dest='sudo_enable',
            action='store_const', const=True)

        sudoers.add_argument(
            '--disable',
            dest='sudo_enable',
            action='store_const', const=False)

        run = gs_subs.add_parser('run', help='run command in guestshell')
        run.add_argument(
            'command', nargs=1,
            help='command string')

        enable = gs_subs.add_parser(
            'enable', help='enable guestshell')

        enable.add_argument(
            '--wipe', help='destory and rebuild guestshell',
            action='store_true')
        enable.add_argument(
            '--maxsize', help='enable guestshell with maximum resources',
            action='store_true')
        enable.add_argument('--cpu', help='CPU resource value')
        enable.add_argument('--memory', help='Memory resource value')
        enable.add_argument('--disk', help='Disk resource value')

        gs_subs.add_parser('show', help='show guestshell details')
        gs_subs.add_parser('disable', help='dsiable guestshell')
        gs_subs.add_parser('destroy', help='destroy guestshell')

    guestshell()

    def rcopy():
        rc = psr_subcmd.add_parser('rcopy', help='Remote copy commands')
        rc.add_argument(
            'from to', nargs=1, help='<from-url> to <local-filesys>')
        rc.add_argument(
            '--md5sum', help='verify this md5sum after copy')

    rcopy()

    return cli

g_cli = setup_cli()
g_cli_args = g_cli.parse_args()
g_log = g_cli.log


# ##### -----------------------------------------------------------------------
# #####
# #####                           Utility Functions
# #####
# ##### -----------------------------------------------------------------------

def exit_results(results, exit_error=None):
    json.dump(results, fp=sys.stdout)
    sys.exit(0 if results['ok'] is True else exit_error or 1)


# ##### -----------------------------------------------------------------------
# #####
# #####                           facts
# #####
# ##### -----------------------------------------------------------------------

def do_facts(dev):
    if g_cli_args.brief:
        facts = dict(
            os_version=dev.facts['os_version'],
            hw_model=dev.facts['hw_model'],
            serial_number=dev.facts['serial_number'])
    else:
        facts = dev.facts

    exit_results(dict(ok=True, facts=facts))


# ##### -----------------------------------------------------------------------
# #####
# #####                           guestshell
# #####
# ##### -----------------------------------------------------------------------

def do_guestshell(dev):

    cli = g_cli

    GS_MAX = {
        'cpu': 6,
        'disk': 1024,
        'memory': 3072
    }

    dev.guestshell()

    def do_gs_run():
        try:
            got = dev.guestshell.run(cli.args.command[0])
            exit_results(dict(
                ok=True,
                stdout=got))

        except Exception as exc:
            # @@@ TO-DO - handle this case
            exit_results(dict(
                ok=False,
                message='unable to run command "%s"' % cli.args.command))

    def do_gs_disable():
        dev.guestshell.disable()

    def do_gs_show():
        exit_results(dict(
            ok=True,
            state=dev.guestshell.state,
            cpu=dev.guestshell.size.cpu,
            disk=dev.guestshell.size.disk,
            memory=dev.guestshell.size.memory))

    def do_gs_enable():
        if cli.args.wipe is True:
            dev.guestshell.destroy()

        if cli.args.maxsize is True:
            cli.args.cpu = GS_MAX['cpu']
            cli.args.disk = GS_MAX['disk']
            cli.args.memory = GS_MAX['memory']

        if 'Activated' == dev.guestshell.state:
            dev.guestshell.disable()

        if cli.args.cpu is not None:
            dev.guestshell.resize_cpu(cli.args.cpu)
        if cli.args.disk is not None:
            dev.guestshell.resize_disk(cli.args.disk)
        if cli.args.memory is not None:
            dev.guestshell.resize_memory(cli.args.memory)

        dev.guestshell.enable()

    def do_gs_sudoers():
        dev.guestshell.sudoers(enable=cli.args.sudo_enable)

    _jmp = dict(
        show=do_gs_show,
        run=do_gs_run,
        disable=do_gs_disable,
        enable=do_gs_enable,
        sudoers=do_gs_sudoers
    )

    _jmp[g_cli.args.guestshell]()


# ##### -----------------------------------------------------------------------
# #####
# #####                           rcopy
# #####
# ##### -----------------------------------------------------------------------

def do_rcopy():
    pass


# ##### -----------------------------------------------------------------------
# #####
# #####                           --- MAIN ---
# #####
# ##### -----------------------------------------------------------------------

def start(dev):

    def unknown(*args):
        exit_results(dict(
            ok=False,
            error_type='args',
            message='Unknown command requested: {}'.format(g_cli_args.subcmd)
        ))

    _jmp = {
        'facts': do_facts,
        'guestshell': do_guestshell,
        'rcopy': do_rcopy
    }

    _jmp.get(g_cli_args.subcmd, unknown)(dev)


def main():
    try:
        dev = nxos.Device(
            target=g_cli.target,
            user=g_cli.user,
            passwd=g_cli.passwd)

    except UnauthorizedError:
        exit_results(dict(
            ok=False,
            error_type='login',
            message='Unauthorized - check username/password'))

    except ProbeError:
        exit_results(dict(
            ok=False,
            error_type='login',
            message='Failed to probe target %s' % g_cli.target))

    else:
        start(dev)

if '__main__' == __name__:
    main()
