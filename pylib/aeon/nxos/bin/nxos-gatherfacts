#!/usr/bin/env python

# nxos-gatherfacts

import sys
import os
import json
import argparse

from aeon.nxos import NxosDevice
from aeon.exceptions import ProbeError, UnauthorizedError


# ##### -----------------------------------------------------------------------
# #####
# #####                           COMMAND LINE ARGUMENTS
# #####
# ##### -----------------------------------------------------------------------

class ArgumentParser(argparse.ArgumentParser):
    class ParserError(Exception):
        pass

    def error(self, message):
        raise ArgumentParser.ParserError(message)


psr = ArgumentParser(
    prog='nxos-gatherfacts',
    description="NXOS gather facts",
    add_help=True)

psr.add_argument(
    '-t', '--target',
    help='hostname or ip_addr of target device',
    required=True)

psr.add_argument(
    '-u', '--user',
    help='login user-name')

psr.add_argument(
    '-U', '--env-user',
    help='env variable containing username')

psr.add_argument(
    '-P', '--env-passwd',
    help='env variable containing passwd')

psr.add_argument(
    '--json',
    action='store_true', default=True,
    help='output in JSON')


# ##### -----------------------------------------------------------------------
# #####
# #####                           MAIN
# #####
# ##### -----------------------------------------------------------------------

def exit_results(results, exit_error=None):
    json.dump(results, fp=sys.stdout)
    sys.exit(0 if results['ok'] is True else exit_error or 1)


def main():
    try:
        cli_args = psr.parse_args()

        target = cli_args.target
        user = cli_args.user or os.getenv(cli_args.env_user)
        passwd = os.getenv(cli_args.env_passwd)

        if not user:
            exit_results(dict(ok=False, message='Missing login user'))

        if not passwd:
            exit_results(dict(ok=False, message='Missing login password'))

    except ArgumentParser.ParserError as exc:
            exit_results(dict(ok=False, message=exc.message))

    try:
        dev = NxosDevice(target, user=user, passwd=passwd)

    except UnauthorizedError:
        exit_results(dict(
            ok=False,
            message='Uauthorized - check user/password'))

    except ProbeError:
        exit_results(dict(
            ok=False,
            message='Failed to probe target %s' % target))

    else:
        exit_results(dict(
            ok=True,
            facts=dict(
                os_version=dev.facts['os_version'],
                hw_model=dev.facts['hw_model'],
                serial_number=dev.facts['serial_number'])))

if '__main__' == __name__:
    main()
