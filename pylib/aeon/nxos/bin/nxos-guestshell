#!/usr/bin/env python

# nxos-gatherfacts

import sys
import json

from aeon.nxos import NxosDevice
from aeon.exceptions import ProbeError, UnauthorizedError
from aeon.utils.stdargs import ArgumentParser, Stdargs

GS_MAX = {
    'cpu': 6,
    'disk': 1024,
    'memory': 3072
}


# ##### -----------------------------------------------------------------------
# #####
# #####                           COMMAND LINE ARGUMENTS
# #####
# ##### -----------------------------------------------------------------------

def setup_cli():
    cli = Stdargs(
        name='nxos-guestshell',
        description="Cisco NXOS guestshell utility")

    subparsers = cli.psr.add_subparsers(dest='subcmd')

    sub = subparsers.add_parser(
        'enable', help='enable guestshell with size')

    sub.add_argument(
        '--cpu', help='CPU percentage setting', type=int)

    sub.add_argument(
        '--disk', help='Disk size setting', type=int)

    sub.add_argument(
        '--memory', help='Memory size setting', type=int)

    sub.add_argument(
        '--maxsize', help='Set resources to maximum values',
        action='store_true')

    sub.add_argument(
        '--wipe', help='Destroy guestshell and re-create',
        action='store_true')

    subparsers.add_parser(
        'show', help='show guestshell details')

    subparsers.add_parser(
        'disable', help='disable guestshell')

    sub = subparsers.add_parser(
        'run', help='run command in guestshell')

    sub.add_argument(
        'command',
        help='command to run within the guesthell')

    return cli


# ##### -----------------------------------------------------------------------
# #####
# #####                           MAIN
# #####
# ##### -----------------------------------------------------------------------

def exit_results(results, exit_error=None):
    json.dump(results, fp=sys.stdout)
    sys.exit(0 if results['ok'] is True else exit_error or 1)


def do_gs_run(cli, dev):
    try:
        got = dev.guestshell.run(cli.args.command)
        exit_results(dict(
            ok=True,
            stdout=got))

    except Exception as exc:
        # @@@ TO-DO - handle this case
        exit_results(dict(
            ok=False,
            message='unable to run command "%s"' % cli.args.command))


def do_gs_disable(cli, dev):
    dev.guestshell.disable()


def do_gs_show(cli, dev):
    exit_results(dict(
        ok=True,
        state=dev.guestshell.state,
        cpu=dev.guestshell.size.cpu,
        disk=dev.guestshell.size.disk,
        memory=dev.guestshell.size.memory))


def do_gs_enable(cli, dev):
    if cli.args.wipe is True:
        dev.guestshell.destroy()

    if cli.args.maxsize is True:
        cli.args.cpu = GS_MAX['cpu']
        cli.args.disk = GS_MAX['disk']
        cli.args.memory = GS_MAX['memory']

    if 'Activated' == dev.guestshell.state:
        dev.guestshell.disable()

    if cli.args.cpu is not None:
        dev.guestshell.resize_cpu(cli.args.cpu)
    if cli.args.disk is not None:
        dev.guestshell.resize_disk(cli.args.disk)
    if cli.args.memory is not None:
        dev.guestshell.resize_memory(cli.args.memory)

    dev.guestshell.enable()


def do_guestshell(cli, dev):
    dev.guestshell()

    {
        'run': do_gs_run,
        'enable': do_gs_enable,
        'disable': do_gs_disable,
        'show': do_gs_show
    }.get(cli.args.subcmd)(cli, dev)


def main():
    cli = setup_cli()

    try:
        cli.parse_args()

        if not cli.user:
            exit_results(dict(ok=False, message='Missing login user'))

        if not cli.passwd:
            exit_results(dict(ok=False, message='Missing login password'))

    except ArgumentParser.ParserError as exc:
            exit_results(dict(ok=False, message=exc.message))

    try:
        dev = NxosDevice(cli.target, user=cli.user, passwd=cli.passwd)

    except UnauthorizedError:
        exit_results(dict(
            ok=False,
            message='Uauthorized - check user/password'))

    except ProbeError:
        exit_results(dict(
            ok=False,
            message='Failed to probe target %s' % cli.target))

    else:
        do_guestshell(cli, dev)

if '__main__' == __name__:
    main()
