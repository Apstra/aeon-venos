#!/usr/bin/env python

# nxos-rcopy

import sys
import os
import json


from aeon.nxos import NxosDevice
from aeon.exceptions import ProbeError, UnauthorizedError
from aeon.utils.stdargs import ArgumentParser, Stdargs
from aeon.nxos.exceptions import NxosException


# ##### -----------------------------------------------------------------------
# #####
# #####                           COMMAND LINE ARGUMENTS
# #####
# ##### -----------------------------------------------------------------------

cli = Stdargs(
    name='nxos-rcopy',
    description="Cisco NXOS remote file copy")

cli.psr.add_argument(
    '--vrf',
    dest='vrf_name',
    help='vrf name',
    default='management')

cli.psr.add_argument(
    '--timeout',
    type=int,
    help='timeout/seconds to allow for copy',
    default=10*60)

cli.psr.add_argument(
    'from_server',
    help='from location on remote-server')

cli.psr.add_argument(
    'to_device',
    help='file location on NXOS device')


# ##### -----------------------------------------------------------------------
# #####
# #####                           MAIN
# #####
# ##### -----------------------------------------------------------------------

def exit_results(results, exit_error=None):
    json.dump(results, fp=sys.stdout)
    sys.exit(0 if results['ok'] is True else exit_error or 1)


def do_rcopy(cli, dev):

    cmd = 'copy {from_remote} {to_local} vrf {vrf_name}'.format(
        from_remote=cli.args.from_server,
        to_local=cli.args.to_device,
        vrf_name=cli.args.vrf_name)


    try:
        dev.api.exec_opcmd(
            cmd, msg_type='cli_show_ascii',
            timeout=cli.args.timeout)

    except NxosException as exc:
        exit_results(dict(
            ok=False,
            copy_command=cmd,
            timeout=cli.args.timeout,
            message=exc.message))

    exit_results(dict(ok=True))


def main():
    try:
        cli.parse_args()

        if not cli.user:
            exit_results(dict(ok=False, message='Missing login user'))

        if not cli.passwd:
            exit_results(dict(ok=False, message='Missing login password'))

    except ArgumentParser.ParserError as exc:
            exit_results(dict(ok=False, message=exc.message))

    try:
        dev = NxosDevice(cli.target, user=cli.user, passwd=cli.passwd)

    except UnauthorizedError:
        exit_results(dict(
            ok=False,
            message='Uauthorized - check user/password'))

    except ProbeError:
        exit_results(dict(
            ok=False,
            message='Failed to probe target %s' % cli.target))

    else:
        do_rcopy(cli, dev)

if '__main__' == __name__:
    main()
